{"version":3,"sources":["helpers/fetchNFTs.js","components/DisplayGhosts.js","components/DisplayPlots.js","components/DisplayWatches.js","components/CategoryButtons.js","App.js","reportWebVitals.js","index.js"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","API_BASE_URL","API_KEY","fetchAllAssetsByStakeAddress","_ref","_asyncToGenerator","_callee2","stakeAddress","apiKey","url","_ref3","page","nfts","fetchPageAssets","pagesData","newAssets","_args2","arguments","_context2","ghosts","plots","watches","console","log","_ref2","_callee","response","_context","axios","get","concat","headers","project_id","data","_x4","apply","all","Array","fill","map","_","index","_toConsumableArray","asset","unit","startsWith","_x","_x2","_x3","fetchAllAssetsByPaymentAddress","_ref4","_callee4","paymentAddress","onAddressNotFound","fetchAssets","assetsData","_args4","_context4","_ref5","_callee3","_context3","t0","status","notFound","message","amount","stake_address","_x5","_x6","_x7","_x8","fetchAssetsByHandle","_ref6","_callee5","handleName","policyID","handleNameWithoutSymbol","assetName","_data","address","_context5","substring","Buffer","from","toString","Content-Type","_slicedToArray","_x9","_x10","_x11","helperFunctions","fetchNFTs","_ref7","_callee6","addressType","_args6","_context6","_x12","DisplayGhosts","_useState","useState","_useState2","svgURLs","setSvgURLs","useEffect","urls","ghost","ghostID","hex","str","String","fromCharCode","parseInt","substr","hexToASCII","match","process","React","createElement","className","src","alt","DisplayPlots","plot","plotID","WatchSVG","style","width","height","DisplayWatches","watch","watchID","CategoryButtons","onSelectCategory","label","category","onClick","categoryKey","App","walletAddress","setWalletAddress","_useState3","_useState4","setNfts","_useState5","_useState6","isLoading","_useState7","_useState8","setMessage","_useState9","_useState10","selectedCategory","setSelectedCategory","handleAddressNotFound","handleSearch","e","fetchedNfts","preventDefault","onSubmit","placeholder","onChange","target","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.2a535c1d.chunk.js","sourcesContent":["// Functions.js\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const API_BASE_URL = \"https://cardano-mainnet.blockfrost.io/api/v0\";\r\nexport const API_KEY = \"mainnet0NnL1ah5PTxMw6JsRYaxZn70w4i9RP6h\";\r\n\r\nexport const hexToASCII = (hex) => {\r\n    let str = \"\";\r\n    for (let i = 0; i < hex.length; i += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return str;\r\n};\r\n\r\nconst fetchAllAssetsByStakeAddress = async (\r\n    stakeAddress,\r\n    apiKey,\r\n    url,\r\n    page = 1,\r\n    nfts = { ghosts: [], plots: [], watches: [] }\r\n) => {\r\n    console.log(\"fetchAllAssetsByStakeAddress called with stakeAddress:\", stakeAddress);\r\n\r\n    const fetchPageAssets = async (page) => {\r\n        const response = await axios.get(\r\n            `${url}/accounts/${stakeAddress}/addresses/assets?count=100&page=${page}`,\r\n            {\r\n                headers: {\r\n                    'project_id': apiKey,\r\n                },\r\n            }\r\n        );\r\n        return response.data;\r\n    };\r\n\r\n    const pagesData = await Promise.all(\r\n        Array(10)\r\n            .fill(0)\r\n            .map((_, index) => fetchPageAssets(page + index))\r\n    );\r\n\r\n    const newAssets = [].concat(...pagesData);\r\n\r\n    if (newAssets.length === 0) {\r\n        return nfts;\r\n    } else {\r\n        newAssets.forEach((asset) => {\r\n            if (asset.unit.startsWith('b000e9f3994de3226577b4d61280994e53c07948c8839d628f4a425a')) {\r\n                nfts.ghosts.push(asset);\r\n            } else if (asset.unit.startsWith('b00041d7dc086d33e0f7777c4fccaf3ef06720543d4ff4e750d8f123')) {\r\n                nfts.plots.push(asset);\r\n            } else if (asset.unit.startsWith('b000e43ed65c89e305bdb5920001558d9f642f3488154b2552a3ad63')) {\r\n                nfts.watches.push(asset);\r\n            }\r\n        });\r\n\r\n        return fetchAllAssetsByStakeAddress(stakeAddress, apiKey, url, page + 10, nfts);\r\n    }\r\n};\r\n\r\n\r\nconst fetchAllAssetsByPaymentAddress = async (\r\n    paymentAddress,\r\n    apiKey,\r\n    url,\r\n    onAddressNotFound,\r\n    nfts = { ghosts: [], plots: [], watches: [] }\r\n) => {\r\n\r\n    const fetchAssets = async () => {\r\n        try {\r\n            const response = await axios.get(\r\n                `${url}/addresses/${paymentAddress}`,\r\n                {\r\n                    headers: {\r\n                        'project_id': apiKey,\r\n                    },\r\n                }\r\n            );\r\n            return response.data;\r\n\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 404) {\r\n                console.error(\"Address not found or has no transactions associated with it.\");\r\n                return { notFound: true };\r\n            } else {\r\n                console.error(\"Error fetching assets:\", error.response ? error.response.data : error.message);\r\n                return { amount: [] };\r\n            }\r\n        }\r\n    };\r\n\r\n    const assetsData = await fetchAssets();\r\n\r\n    if (assetsData.notFound) {\r\n        onAddressNotFound();\r\n        return nfts;\r\n    }\r\n\r\n    return fetchAllAssetsByStakeAddress(assetsData.stake_address, API_KEY, API_BASE_URL)\r\n\r\n};\r\n\r\n\r\nconst fetchAssetsByHandle = async (\r\n    handleName,\r\n    apiKey,\r\n    url\r\n) => {\r\n    const policyID = 'f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9a';\r\n\r\n    if (handleName.length === 0) {\r\n        throw new Error(\"Invalid handle name.\");\r\n    }\r\n\r\n    const handleNameWithoutSymbol = handleName.substring(1);\r\n\r\n    const assetName = Buffer.from(handleNameWithoutSymbol).toString('hex');\r\n\r\n    const response = await axios.get(\r\n        `${url}/assets/${policyID}${assetName}/addresses`,\r\n        {\r\n            headers: {\r\n                'project_id': apiKey,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n    );\r\n    const data = response.data;\r\n\r\n    if (data && data.error) {\r\n        throw new Error(data.error);\r\n    }\r\n\r\n    const [{ address }] = data;\r\n\r\n    return fetchAllAssetsByPaymentAddress(address, API_KEY, API_BASE_URL)\r\n\r\n\r\n};\r\n\r\nexport const helperFunctions = {\r\n    fetchAllAssetsByPaymentAddress,\r\n    fetchAllAssetsByStakeAddress,\r\n    fetchAssetsByHandle,\r\n};\r\n\r\n\r\nexport const fetchNFTs = async (address, addressType = \"payment\", onAddressNotFound, helperFunctions) => {\r\n\r\n    try {\r\n        let nfts;\r\n        if (addressType === \"stake\") {\r\n            nfts = await fetchAllAssetsByStakeAddress(address, API_KEY, API_BASE_URL);\r\n        } else if (addressType === \"payment\") {\r\n            nfts = await fetchAllAssetsByPaymentAddress(address, API_KEY, API_BASE_URL, onAddressNotFound);\r\n        } else if (addressType === \"handle\") {\r\n            nfts = await fetchAssetsByHandle(address, API_KEY, API_BASE_URL);\r\n        } else {\r\n            throw new Error(\"Invalid address type.\");\r\n        }\r\n\r\n\r\n        console.log(\"Ghosts:\", nfts.ghosts);\r\n        console.log(\"Plots:\", nfts.plots);\r\n        console.log(\"Watches:\", nfts.watches);\r\n\r\n        if (nfts.ghosts.length === 0 && nfts.plots.length === 0 && nfts.watches.length === 0) {\r\n            console.error(\"No NFTs found\");\r\n            // Handle the error or display a message accordingly\r\n        } else {\r\n            // Add your processing code here\r\n        }\r\n\r\n        return nfts;\r\n    } catch (error) {\r\n        console.error(\"Error fetching NFTs:\", error);\r\n        if (error.message === \"Invalid address format.\") {\r\n            // Handle the error or display a message accordingly\r\n        } else {\r\n            // Handle the error or display a message accordingly\r\n        }\r\n        throw error;\r\n    }\r\n};\r\n","// DisplayGhosts.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction hexToASCII(hex) {\r\n    let str = '';\r\n    for (let i = 0; i < hex.length; i += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return str;\r\n}\r\n\r\nconst DisplayGhosts = ({ ghosts }) => {\r\n    const [svgURLs, setSvgURLs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (ghosts && ghosts.length > 0) {\r\n            const urls = ghosts.map((ghost) => {\r\n                const assetUnit = ghost.unit;\r\n                const asciiString = hexToASCII(assetUnit);\r\n                const ghostID = asciiString.match(/\\d+$/)[0];\r\n                const url = `${process.env.PUBLIC_URL}/ghostSVGs/cg${ghostID}.svg`;\r\n                return url;\r\n            });\r\n            setSvgURLs(urls);\r\n        }\r\n    }, [ghosts]);\r\n\r\n    return (\r\n        <div className={`ghost-grid${svgURLs.length > 1 ? \" multiple\" : \"\"}`}>\r\n            {svgURLs.map((url, index) => (\r\n                <div key={index}>\r\n                    <img src={url} alt={`Ghost ${index}`} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayGhosts;\r\n","// DisplayPlots.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nfunction hexToASCII(hex) {\r\n    let str = '';\r\n    for (let i = 0; i < hex.length; i += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return str;\r\n}\r\n\r\nconst DisplayPlots = ({ plots }) => {\r\n    const [svgURLs, setSvgURLs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (plots && plots.length > 0) {\r\n            const urls = plots.map((plot) => {\r\n                const assetUnit = plot.unit;\r\n                const asciiString = hexToASCII(assetUnit);\r\n                const plotID = asciiString.match(/\\d+$/)[0];\r\n                const url = `${process.env.PUBLIC_URL}/plotSVGs/ClumsyValleyLandPlot${plotID}_ipfs.svg`;\r\n                return url;\r\n            });\r\n            setSvgURLs(urls);\r\n        }\r\n    }, [plots]);\r\n\r\n    return (\r\n        <div className={`plot-grid${svgURLs.length > 1 ? \" multiple\" : \"\"}`}>\r\n            {svgURLs.map((url, index) => (\r\n                <div key={index}>\r\n                    <img src={url} alt={`Plot ${index}`} />\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayPlots;\r\n","// DisplayWatches.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\nfunction hexToASCII(hex) {\r\n    let str = '';\r\n    for (let i = 0; i < hex.length; i += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return str;\r\n}\r\n\r\nconst WatchSVG = ({ url }) => {\r\n    return (\r\n        <object\r\n            type=\"image/svg+xml\"\r\n            data={url}\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n        />\r\n    );\r\n};\r\n\r\n\r\nconst DisplayWatches = ({ watches }) => {\r\n    const [svgURLs, setSvgURLs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (watches && watches.length > 0) {\r\n            const urls = watches.map((watch) => {\r\n                const assetUnit = watch.unit;\r\n                const asciiString = hexToASCII(assetUnit);\r\n                const watchID = asciiString.match(/\\d+$/)[0];\r\n                const url = `${process.env.PUBLIC_URL}/watchSVGs/Ghostwatch${watchID}.svg`;\r\n                return url;\r\n            });\r\n            setSvgURLs(urls);\r\n        }\r\n    }, [watches]);\r\n\r\n    return (\r\n        <div className={`watch-grid${svgURLs.length > 1 ? \" multiple\" : \"\"}`}>\r\n            {svgURLs.map((url, index) => (\r\n                <WatchSVG key={index} url={url} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayWatches;\r\n","// CategoryButtons.js\r\n\r\nimport React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst CategoryButtons = ({ onSelectCategory }) => {\r\n    const categories = [\r\n        { key: \"ghosts\", label: \"Ghosts\" },\r\n        { key: \"plots\", label: \"Plots\" },\r\n        { key: \"watches\", label: \"Watches\" },\r\n    ];\r\n\r\n    const handleCategoryClick = (categoryKey) => {\r\n        onSelectCategory(categoryKey);\r\n    };\r\n\r\n    return (\r\n        <div className=\"category-buttons\">\r\n            {categories.map((category) => (\r\n                <button\r\n                    className=\"category-button\" // Add the className attribute\r\n                    key={category.key}\r\n                    onClick={() => handleCategoryClick(category.key)}\r\n                >\r\n                    {category.label}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoryButtons;\r\n","// App.js\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { fetchNFTs, helperFunctions } from \"./helpers/fetchNFTs\";\nimport DisplayGhosts from \"./components/DisplayGhosts\";\nimport DisplayPlots from \"./components/DisplayPlots\";\nimport DisplayWatches from \"./components/DisplayWatches\";\nimport CategoryButtons from \"./components/CategoryButtons\";\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [nfts, setNfts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(\"ghosts\");\n\n  const handleAddressNotFound = () => {\n    setMessage(\"404 ERROR: Address either a) does not exist or b) has no transactions associated with it. If using Eternl, select 'Show used/additional addresses' on the 'Receive' page and select a used address\");\n  };\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    setNfts(null);\n    setMessage('');\n\n    if (walletAddress) {\n      try {\n        let addressType;\n        if (walletAddress.startsWith(\"stake\")) {\n          addressType = \"stake\";\n        } else if (walletAddress.startsWith(\"addr\")) {\n          addressType = \"payment\";\n        } else if (walletAddress.startsWith(\"$\")) {\n          addressType = \"handle\";\n        } else {\n          throw new Error(\"Invalid address format.\");\n        }\n\n        const fetchedNfts = await fetchNFTs(walletAddress, addressType, handleAddressNotFound, helperFunctions);\n        setNfts(fetchedNfts);\n      } catch (error) {\n        console.error(\"Error fetching NFTs:\", error);\n      }\n    } else {\n      console.error(\"Please enter a valid address\");\n    }\n  };\n\n  const selectCategory = (category) => {\n    setSelectedCategory(category);\n  };\n\n  return (\n    <div>\n      <h1>Clumsy View</h1>\n      <form onSubmit={handleSearch}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter wallet address, ADA Handle, or stake key\"\n          value={walletAddress}\n          onChange={(e) => setWalletAddress(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isLoading}\n      {message && <div className=\"alert\">{message}</div>}\n      <div>\n        {nfts && (\n          <>\n            <CategoryButtons onSelectCategory={selectCategory} />\n            {selectedCategory === \"ghosts\" && <DisplayGhosts ghosts={nfts.ghosts} />}\n            {selectedCategory === \"plots\" && <DisplayPlots plots={nfts.plots} />}\n            {selectedCategory === \"watches\" && <DisplayWatches watches={nfts.watches} />}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'text-encoding';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}