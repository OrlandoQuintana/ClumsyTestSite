{"version":3,"sources":["components/DisplayGhosts.js","components/DisplayPlots.js","components/DisplayWatches.js","components/CategoryButtons.js","App.js","reportWebVitals.js","index.js","helpers/fetchNFTs.js"],"names":["GhostSVG","_ref","url","React","createElement","type","data","style","width","height","DisplayGhosts","_ref2","ghosts","_useState","useState","_useState2","_slicedToArray","svgURLs","setSvgURLs","useEffect","length","urls","map","ghost","assetUnit","unit","ghostID","hexToASCII","match","concat","process","className","index","key","PlotSVG","DisplayPlots","plots","plot","plotID","WatchSVG","DisplayWatches","watches","watch","watchID","CategoryButtons","onSelectCategory","label","category","onClick","categoryKey","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","App","walletAddress","setWalletAddress","_useState3","_useState4","nfts","setNfts","_useState5","_useState6","isLoading","_useState7","_useState8","message","setMessage","_useState9","_useState10","selectedCategory","setSelectedCategory","handleAddressNotFound","handleSearch","_asyncToGenerator","_callee","e","addressType","fetchedNfts","_context","preventDefault","startsWith","fetchNFTs","helperFunctions","t0","console","_x","apply","arguments","onSubmit","placeholder","onChange","target","Fragment","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","API_BASE_URL","API_KEY","hex","str","String","fromCharCode","parseInt","substr","fetchAllAssetsByStakeAddress","_callee2","stakeAddress","apiKey","_ref3","page","fetchPageAssets","pagesData","newAssets","_args2","_context2","log","response","axios","get","headers","project_id","_x4","all","Array","fill","_","_toConsumableArray","asset","_x2","_x3","fetchAllAssetsByPaymentAddress","_ref4","_callee4","paymentAddress","onAddressNotFound","fetchAssets","assetsData","_args4","_context4","_ref5","_callee3","_context3","status","notFound","amount","stake_address","_x5","_x6","_x7","_x8","fetchAssetsByHandle","_ref6","_callee5","handleName","policyID","handleNameWithoutSymbol","assetName","_data","address","_context5","substring","Buffer","from","toString","Content-Type","_x9","_x10","_x11","_ref7","_callee6","_args6","_context6","_x12"],"mappings":"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","file":"static/js/main.64915c2f.chunk.js","sourcesContent":["// DisplayGhosts.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { hexToASCII } from \"../helpers/fetchNFTs\";\r\n\r\nconst GhostSVG = ({ url }) => {\r\n    return (\r\n        <object\r\n            type=\"image/svg+xml\"\r\n            data={url}\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n        />\r\n    );\r\n};\r\n\r\nconst DisplayGhosts = ({ ghosts }) => {\r\n    const [svgURLs, setSvgURLs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (ghosts && ghosts.length > 0) {\r\n            const urls = ghosts.map((ghost) => {\r\n                const assetUnit = ghost.unit;\r\n                const asciiString = hexToASCII(assetUnit);\r\n                const ghostID = asciiString.match(/\\d+$/)[0];\r\n                const url = `${process.env.PUBLIC_URL}/ghostSVGs/cg${ghostID}.svg`;\r\n                return url;\r\n            });\r\n            setSvgURLs(urls);\r\n        }\r\n    }, [ghosts]);\r\n\r\n    return (\r\n        <div className={`ghost-grid${svgURLs.length > 1 ? \" multiple\" : \"\"}`}>\r\n            {svgURLs.map((url, index) => (\r\n                <GhostSVG key={index} url={url} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayGhosts;\r\n","// DisplayPlots.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { hexToASCII } from \"../helpers/fetchNFTs\";\r\n\r\nconst PlotSVG = ({ url }) => {\r\n    return (\r\n        <object\r\n            type=\"image/svg+xml\"\r\n            data={url}\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n        />\r\n    );\r\n};\r\n\r\nconst DisplayPlots = ({ plots }) => {\r\n    const [svgURLs, setSvgURLs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (plots && plots.length > 0) {\r\n            const urls = plots.map((plot) => {\r\n                const assetUnit = plot.unit;\r\n                const asciiString = hexToASCII(assetUnit);\r\n                const plotID = asciiString.match(/\\d+$/)[0];\r\n                const url = `${process.env.PUBLIC_URL}/plotSVGs/ClumsyValleyLandPlot${plotID}_ipfs.svg`;\r\n                return url;\r\n            });\r\n            setSvgURLs(urls);\r\n        }\r\n    }, [plots]);\r\n\r\n    return (\r\n        <div className={`plot-grid${svgURLs.length > 1 ? \" multiple\" : \"\"}`}>\r\n            {svgURLs.map((url, index) => (\r\n                <PlotSVG key={index} url={url} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayPlots;","// DisplayWatches.js\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { hexToASCII } from \"../helpers/fetchNFTs\";\r\n\r\nconst WatchSVG = ({ url }) => {\r\n    return (\r\n        <object\r\n            type=\"image/svg+xml\"\r\n            data={url}\r\n            style={{ width: \"100%\", height: \"100%\" }}\r\n        />\r\n    );\r\n};\r\n\r\n\r\nconst DisplayWatches = ({ watches }) => {\r\n    const [svgURLs, setSvgURLs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (watches && watches.length > 0) {\r\n            const urls = watches.map((watch) => {\r\n                const assetUnit = watch.unit;\r\n                const asciiString = hexToASCII(assetUnit);\r\n                const watchID = asciiString.match(/\\d+$/)[0];\r\n                const url = `${process.env.PUBLIC_URL}/watchSVGs/Ghostwatch${watchID}.svg`;\r\n                return url;\r\n            });\r\n            setSvgURLs(urls);\r\n        }\r\n    }, [watches]);\r\n\r\n    return (\r\n        <div className={`watch-grid${svgURLs.length > 1 ? \" multiple\" : \"\"}`}>\r\n            {svgURLs.map((url, index) => (\r\n                <WatchSVG key={index} url={url} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayWatches;\r\n","// CategoryButtons.js\r\n\r\nimport React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst CategoryButtons = ({ onSelectCategory }) => {\r\n    const categories = [\r\n        { key: \"ghosts\", label: \"Ghosts\" },\r\n        { key: \"plots\", label: \"Plots\" },\r\n        { key: \"watches\", label: \"Watches\" },\r\n    ];\r\n\r\n    const handleCategoryClick = (categoryKey) => {\r\n        onSelectCategory(categoryKey);\r\n    };\r\n\r\n    return (\r\n        <div className=\"category-buttons\">\r\n            {categories.map((category) => (\r\n                <button\r\n                    className=\"category-button\" // Add the className attribute\r\n                    key={category.key}\r\n                    onClick={() => handleCategoryClick(category.key)}\r\n                >\r\n                    {category.label}\r\n                </button>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CategoryButtons;\r\n","// App.js\n\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport { fetchNFTs, helperFunctions } from \"./helpers/fetchNFTs\";\nimport DisplayGhosts from \"./components/DisplayGhosts\";\nimport DisplayPlots from \"./components/DisplayPlots\";\nimport DisplayWatches from \"./components/DisplayWatches\";\nimport CategoryButtons from \"./components/CategoryButtons\";\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [nfts, setNfts] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState(\"ghosts\");\n\n  const handleAddressNotFound = () => {\n    setMessage(\"404 ERROR: Address either a) does not exist or b) has no transactions associated with it. If using Eternl, select 'Show used/additional addresses' on the 'Receive' page and select a used address\");\n  };\n\n  const handleSearch = async (e) => {\n    e.preventDefault();\n    setNfts(null);\n    setMessage('');\n\n    if (walletAddress) {\n      try {\n        let addressType;\n        if (walletAddress.startsWith(\"stake\")) {\n          addressType = \"stake\";\n        } else if (walletAddress.startsWith(\"addr\")) {\n          addressType = \"payment\";\n        } else if (walletAddress.startsWith(\"$\")) {\n          addressType = \"handle\";\n        } else {\n          throw new Error(\"Invalid address format.\");\n        }\n\n        const fetchedNfts = await fetchNFTs(walletAddress, addressType, handleAddressNotFound, helperFunctions);\n        setNfts(fetchedNfts);\n      } catch (error) {\n        console.error(\"Error fetching NFTs:\", error);\n      }\n    } else {\n      console.error(\"Please enter a valid address\");\n    }\n  };\n\n  const selectCategory = (category) => {\n    setSelectedCategory(category);\n  };\n\n  return (\n    <div>\n      <h1>Clumsy View</h1>\n      <form onSubmit={handleSearch}>\n        <input\n          type=\"text\"\n          placeholder=\"Enter wallet address, ADA Handle, or stake key\"\n          value={walletAddress}\n          onChange={(e) => setWalletAddress(e.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {isLoading}\n      {message && <div className=\"alert\">{message}</div>}\n      <div>\n        {nfts && (\n          <>\n            <CategoryButtons onSelectCategory={selectCategory} />\n            {selectedCategory === \"ghosts\" && <DisplayGhosts ghosts={nfts.ghosts} />}\n            {selectedCategory === \"plots\" && <DisplayPlots plots={nfts.plots} />}\n            {selectedCategory === \"watches\" && <DisplayWatches watches={nfts.watches} />}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'text-encoding';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// Functions.js\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const API_BASE_URL = \"https://cardano-mainnet.blockfrost.io/api/v0\";\r\nexport const API_KEY = \"mainnet0NnL1ah5PTxMw6JsRYaxZn70w4i9RP6h\";\r\n\r\nexport const hexToASCII = (hex) => {\r\n    let str = \"\";\r\n    for (let i = 0; i < hex.length; i += 2) {\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    }\r\n    return str;\r\n};\r\n\r\nconst fetchAllAssetsByStakeAddress = async (\r\n    stakeAddress,\r\n    apiKey,\r\n    url,\r\n    page = 1,\r\n    nfts = { ghosts: [], plots: [], watches: [] }\r\n) => {\r\n    console.log(\"fetchAllAssetsByStakeAddress called with stakeAddress:\", stakeAddress);\r\n\r\n    const fetchPageAssets = async (page) => {\r\n        const response = await axios.get(\r\n            `${url}/accounts/${stakeAddress}/addresses/assets?count=100&page=${page}`,\r\n            {\r\n                headers: {\r\n                    'project_id': apiKey,\r\n                },\r\n            }\r\n        );\r\n        return response.data;\r\n    };\r\n\r\n    const pagesData = await Promise.all(\r\n        Array(10)\r\n            .fill(0)\r\n            .map((_, index) => fetchPageAssets(page + index))\r\n    );\r\n\r\n    const newAssets = [].concat(...pagesData);\r\n\r\n    if (newAssets.length === 0) {\r\n        return nfts;\r\n    } else {\r\n        newAssets.forEach((asset) => {\r\n            if (asset.unit.startsWith('b000e9f3994de3226577b4d61280994e53c07948c8839d628f4a425a')) {\r\n                nfts.ghosts.push(asset);\r\n            } else if (asset.unit.startsWith('b00041d7dc086d33e0f7777c4fccaf3ef06720543d4ff4e750d8f123')) {\r\n                nfts.plots.push(asset);\r\n            } else if (asset.unit.startsWith('b000e43ed65c89e305bdb5920001558d9f642f3488154b2552a3ad63')) {\r\n                nfts.watches.push(asset);\r\n            }\r\n        });\r\n\r\n        return fetchAllAssetsByStakeAddress(stakeAddress, apiKey, url, page + 10, nfts);\r\n    }\r\n};\r\n\r\n\r\nconst fetchAllAssetsByPaymentAddress = async (\r\n    paymentAddress,\r\n    apiKey,\r\n    url,\r\n    onAddressNotFound,\r\n    nfts = { ghosts: [], plots: [], watches: [] }\r\n) => {\r\n\r\n    const fetchAssets = async () => {\r\n        try {\r\n            const response = await axios.get(\r\n                `${url}/addresses/${paymentAddress}`,\r\n                {\r\n                    headers: {\r\n                        'project_id': apiKey,\r\n                    },\r\n                }\r\n            );\r\n            return response.data;\r\n\r\n        } catch (error) {\r\n            if (error.response && error.response.status === 404) {\r\n                console.error(\"Address not found or has no transactions associated with it.\");\r\n                return { notFound: true };\r\n            } else {\r\n                console.error(\"Error fetching assets:\", error.response ? error.response.data : error.message);\r\n                return { amount: [] };\r\n            }\r\n        }\r\n    };\r\n\r\n    const assetsData = await fetchAssets();\r\n\r\n    if (assetsData.notFound) {\r\n        onAddressNotFound();\r\n        return nfts;\r\n    }\r\n\r\n    return fetchAllAssetsByStakeAddress(assetsData.stake_address, API_KEY, API_BASE_URL)\r\n\r\n};\r\n\r\n\r\nconst fetchAssetsByHandle = async (\r\n    handleName,\r\n    apiKey,\r\n    url\r\n) => {\r\n    const policyID = 'f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9a';\r\n\r\n    if (handleName.length === 0) {\r\n        throw new Error(\"Invalid handle name.\");\r\n    }\r\n\r\n    const handleNameWithoutSymbol = handleName.substring(1);\r\n\r\n    const assetName = Buffer.from(handleNameWithoutSymbol).toString('hex');\r\n\r\n    const response = await axios.get(\r\n        `${url}/assets/${policyID}${assetName}/addresses`,\r\n        {\r\n            headers: {\r\n                'project_id': apiKey,\r\n                'Content-Type': 'application/json',\r\n            },\r\n        }\r\n    );\r\n    const data = response.data;\r\n\r\n    if (data && data.error) {\r\n        throw new Error(data.error);\r\n    }\r\n\r\n    const [{ address }] = data;\r\n\r\n    return fetchAllAssetsByPaymentAddress(address, API_KEY, API_BASE_URL)\r\n\r\n\r\n};\r\n\r\nexport const helperFunctions = {\r\n    fetchAllAssetsByPaymentAddress,\r\n    fetchAllAssetsByStakeAddress,\r\n    fetchAssetsByHandle,\r\n};\r\n\r\n\r\nexport const fetchNFTs = async (address, addressType = \"payment\", onAddressNotFound, helperFunctions) => {\r\n\r\n    try {\r\n        let nfts;\r\n        if (addressType === \"stake\") {\r\n            nfts = await fetchAllAssetsByStakeAddress(address, API_KEY, API_BASE_URL);\r\n        } else if (addressType === \"payment\") {\r\n            nfts = await fetchAllAssetsByPaymentAddress(address, API_KEY, API_BASE_URL, onAddressNotFound);\r\n        } else if (addressType === \"handle\") {\r\n            nfts = await fetchAssetsByHandle(address, API_KEY, API_BASE_URL);\r\n        } else {\r\n            throw new Error(\"Invalid address type.\");\r\n        }\r\n\r\n\r\n        console.log(\"Ghosts:\", nfts.ghosts);\r\n        console.log(\"Plots:\", nfts.plots);\r\n        console.log(\"Watches:\", nfts.watches);\r\n\r\n        if (nfts.ghosts.length === 0 && nfts.plots.length === 0 && nfts.watches.length === 0) {\r\n            console.error(\"No NFTs found\");\r\n            // Handle the error or display a message accordingly\r\n        } else {\r\n            // Add your processing code here\r\n        }\r\n\r\n        return nfts;\r\n    } catch (error) {\r\n        console.error(\"Error fetching NFTs:\", error);\r\n        if (error.message === \"Invalid address format.\") {\r\n            // Handle the error or display a message accordingly\r\n        } else {\r\n            // Handle the error or display a message accordingly\r\n        }\r\n        throw error;\r\n    }\r\n};\r\n"],"sourceRoot":""}